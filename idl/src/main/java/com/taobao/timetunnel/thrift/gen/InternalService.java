/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.taobao.timetunnel.thrift.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
@SuppressWarnings({"rawtypes","unused","unchecked","serial"})
public class InternalService {

  public interface Iface {

    public void copy(String category, ByteBuffer token, ByteBuffer message) throws Failure, TException;

    public void dump(String category, ByteBuffer token, ByteBuffer message) throws Failure, TException;

    public void trim(String category, ByteBuffer token, int size) throws Failure, TException;

  }

  public interface AsyncIface {

    public void copy(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<AsyncClient.copy_call> resultHandler) throws TException;

    public void dump(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<AsyncClient.dump_call> resultHandler) throws TException;

    public void trim(String category, ByteBuffer token, int size, AsyncMethodCallback<AsyncClient.trim_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void copy(String category, ByteBuffer token, ByteBuffer message) throws Failure, TException
    {
      send_copy(category, token, message);
      recv_copy();
    }

    public void send_copy(String category, ByteBuffer token, ByteBuffer message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("copy", TMessageType.CALL, ++seqid_));
      copy_args args = new copy_args();
      args.setCategory(category);
      args.setToken(token);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_copy() throws Failure, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "copy failed: out of sequence response");
      }
      copy_result result = new copy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.f != null) {
        throw result.f;
      }
      return;
    }

    public void dump(String category, ByteBuffer token, ByteBuffer message) throws Failure, TException
    {
      send_dump(category, token, message);
      recv_dump();
    }

    public void send_dump(String category, ByteBuffer token, ByteBuffer message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("dump", TMessageType.CALL, ++seqid_));
      dump_args args = new dump_args();
      args.setCategory(category);
      args.setToken(token);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_dump() throws Failure, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "dump failed: out of sequence response");
      }
      dump_result result = new dump_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.f != null) {
        throw result.f;
      }
      return;
    }

    public void trim(String category, ByteBuffer token, int size) throws Failure, TException
    {
      send_trim(category, token, size);
      recv_trim();
    }

    public void send_trim(String category, ByteBuffer token, int size) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("trim", TMessageType.CALL, ++seqid_));
      trim_args args = new trim_args();
      args.setCategory(category);
      args.setToken(token);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_trim() throws Failure, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "trim failed: out of sequence response");
      }
      trim_result result = new trim_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.f != null) {
        throw result.f;
      }
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void copy(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<copy_call> resultHandler) throws TException {
      checkReady();
      copy_call method_call = new copy_call(category, token, message, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class copy_call extends TAsyncMethodCall {
      private String category;
      private ByteBuffer token;
      private ByteBuffer message;
      public copy_call(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<copy_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.category = category;
        this.token = token;
        this.message = message;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("copy", TMessageType.CALL, 0));
        copy_args args = new copy_args();
        args.setCategory(category);
        args.setToken(token);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws Failure, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_copy();
      }
    }

    public void dump(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<dump_call> resultHandler) throws TException {
      checkReady();
      dump_call method_call = new dump_call(category, token, message, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class dump_call extends TAsyncMethodCall {
      private String category;
      private ByteBuffer token;
      private ByteBuffer message;
      public dump_call(String category, ByteBuffer token, ByteBuffer message, AsyncMethodCallback<dump_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.category = category;
        this.token = token;
        this.message = message;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("dump", TMessageType.CALL, 0));
        dump_args args = new dump_args();
        args.setCategory(category);
        args.setToken(token);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws Failure, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dump();
      }
    }

    public void trim(String category, ByteBuffer token, int size, AsyncMethodCallback<trim_call> resultHandler) throws TException {
      checkReady();
      trim_call method_call = new trim_call(category, token, size, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class trim_call extends TAsyncMethodCall {
      private String category;
      private ByteBuffer token;
      private int size;
      public trim_call(String category, ByteBuffer token, int size, AsyncMethodCallback<trim_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.category = category;
        this.token = token;
        this.size = size;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("trim", TMessageType.CALL, 0));
        trim_args args = new trim_args();
        args.setCategory(category);
        args.setToken(token);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws Failure, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_trim();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("copy", new copy());
      processMap_.put("dump", new dump());
      processMap_.put("trim", new trim());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class copy implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        copy_args args = new copy_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("copy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        copy_result result = new copy_result();
        try {
          iface_.copy(args.category, args.token, args.message);
        } catch (Failure f) {
          result.f = f;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing copy", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing copy");
          oprot.writeMessageBegin(new TMessage("copy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("copy", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class dump implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        dump_args args = new dump_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("dump", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        dump_result result = new dump_result();
        try {
          iface_.dump(args.category, args.token, args.message);
        } catch (Failure f) {
          result.f = f;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing dump", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing dump");
          oprot.writeMessageBegin(new TMessage("dump", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("dump", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class trim implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        trim_args args = new trim_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("trim", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        trim_result result = new trim_result();
        try {
          iface_.trim(args.category, args.token, args.size);
        } catch (Failure f) {
          result.f = f;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing trim", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing trim");
          oprot.writeMessageBegin(new TMessage("trim", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("trim", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class copy_args implements TBase<copy_args, copy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("copy_args");

    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)1);
    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)3);

    public String category;
    public ByteBuffer token;
    public ByteBuffer message;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CATEGORY((short)1, "category"),
      TOKEN((short)2, "token"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 2: // TOKEN
            return TOKEN;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(copy_args.class, metaDataMap);
    }

    public copy_args() {
    }

    public copy_args(
      String category,
      ByteBuffer token,
      ByteBuffer message)
    {
      this();
      this.category = category;
      this.token = token;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copy_args(copy_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetToken()) {
        this.token = TBaseHelper.copyBinary(other.token);
;
      }
      if (other.isSetMessage()) {
        this.message = TBaseHelper.copyBinary(other.message);
;
      }
    }

    public copy_args deepCopy() {
      return new copy_args(this);
    }

    @Override
    public void clear() {
      this.category = null;
      this.token = null;
      this.message = null;
    }

    public String getCategory() {
      return this.category;
    }

    public copy_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been asigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public byte[] getToken() {
      setToken(TBaseHelper.rightSize(token));
      return token.array();
    }

    public ByteBuffer BufferForToken() {
      return token;
    }

    public copy_args setToken(byte[] token) {
      setToken(ByteBuffer.wrap(token));
      return this;
    }

    public copy_args setToken(ByteBuffer token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public byte[] getMessage() {
      setMessage(TBaseHelper.rightSize(message));
      return message.array();
    }

    public ByteBuffer BufferForMessage() {
      return message;
    }

    public copy_args setMessage(byte[] message) {
      setMessage(ByteBuffer.wrap(message));
      return this;
    }

    public copy_args setMessage(ByteBuffer message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been asigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ByteBuffer)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case TOKEN:
        return getToken();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case TOKEN:
        return isSetToken();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copy_args)
        return this.equals((copy_args)that);
      return false;
    }

    public boolean equals(copy_args that) {
      if (that == null)
        return false;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copy_args typedOther = (copy_args)other;

      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CATEGORY
            if (field.type == TType.STRING) {
              this.category = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE
            if (field.type == TType.STRING) {
              this.message = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(this.category);
        oprot.writeFieldEnd();
      }
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeBinary(this.token);
        oprot.writeFieldEnd();
      }
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeBinary(this.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copy_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.token, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.message, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class copy_result implements TBase<copy_result, copy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("copy_result");

    private static final TField F_FIELD_DESC = new TField("f", TType.STRUCT, (short)1);

    public Failure f;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      F((short)1, "f");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // F
            return F;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.F, new FieldMetaData("f", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(copy_result.class, metaDataMap);
    }

    public copy_result() {
    }

    public copy_result(
      Failure f)
    {
      this();
      this.f = f;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copy_result(copy_result other) {
      if (other.isSetF()) {
        this.f = new Failure(other.f);
      }
    }

    public copy_result deepCopy() {
      return new copy_result(this);
    }

    @Override
    public void clear() {
      this.f = null;
    }

    public Failure getF() {
      return this.f;
    }

    public copy_result setF(Failure f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been asigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((Failure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case F:
        return getF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case F:
        return isSetF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copy_result)
        return this.equals((copy_result)that);
      return false;
    }

    public boolean equals(copy_result that) {
      if (that == null)
        return false;

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copy_result typedOther = (copy_result)other;

      lastComparison = Boolean.valueOf(isSetF()).compareTo(typedOther.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = TBaseHelper.compareTo(this.f, typedOther.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // F
            if (field.type == TType.STRUCT) {
              this.f = new Failure();
              this.f.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetF()) {
        oprot.writeFieldBegin(F_FIELD_DESC);
        this.f.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copy_result(");
      boolean first = true;

      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class dump_args implements TBase<dump_args, dump_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("dump_args");

    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)1);
    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)3);

    public String category;
    public ByteBuffer token;
    public ByteBuffer message;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CATEGORY((short)1, "category"),
      TOKEN((short)2, "token"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 2: // TOKEN
            return TOKEN;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dump_args.class, metaDataMap);
    }

    public dump_args() {
    }

    public dump_args(
      String category,
      ByteBuffer token,
      ByteBuffer message)
    {
      this();
      this.category = category;
      this.token = token;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_args(dump_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetToken()) {
        this.token = TBaseHelper.copyBinary(other.token);
;
      }
      if (other.isSetMessage()) {
        this.message = TBaseHelper.copyBinary(other.message);
;
      }
    }

    public dump_args deepCopy() {
      return new dump_args(this);
    }

    @Override
    public void clear() {
      this.category = null;
      this.token = null;
      this.message = null;
    }

    public String getCategory() {
      return this.category;
    }

    public dump_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been asigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public byte[] getToken() {
      setToken(TBaseHelper.rightSize(token));
      return token.array();
    }

    public ByteBuffer BufferForToken() {
      return token;
    }

    public dump_args setToken(byte[] token) {
      setToken(ByteBuffer.wrap(token));
      return this;
    }

    public dump_args setToken(ByteBuffer token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public byte[] getMessage() {
      setMessage(TBaseHelper.rightSize(message));
      return message.array();
    }

    public ByteBuffer BufferForMessage() {
      return message;
    }

    public dump_args setMessage(byte[] message) {
      setMessage(ByteBuffer.wrap(message));
      return this;
    }

    public dump_args setMessage(ByteBuffer message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been asigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ByteBuffer)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case TOKEN:
        return getToken();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case TOKEN:
        return isSetToken();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_args)
        return this.equals((dump_args)that);
      return false;
    }

    public boolean equals(dump_args that) {
      if (that == null)
        return false;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dump_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dump_args typedOther = (dump_args)other;

      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CATEGORY
            if (field.type == TType.STRING) {
              this.category = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE
            if (field.type == TType.STRING) {
              this.message = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(this.category);
        oprot.writeFieldEnd();
      }
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeBinary(this.token);
        oprot.writeFieldEnd();
      }
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeBinary(this.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.token, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.message, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class dump_result implements TBase<dump_result, dump_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("dump_result");

    private static final TField F_FIELD_DESC = new TField("f", TType.STRUCT, (short)1);

    public Failure f;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      F((short)1, "f");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // F
            return F;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.F, new FieldMetaData("f", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dump_result.class, metaDataMap);
    }

    public dump_result() {
    }

    public dump_result(
      Failure f)
    {
      this();
      this.f = f;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_result(dump_result other) {
      if (other.isSetF()) {
        this.f = new Failure(other.f);
      }
    }

    public dump_result deepCopy() {
      return new dump_result(this);
    }

    @Override
    public void clear() {
      this.f = null;
    }

    public Failure getF() {
      return this.f;
    }

    public dump_result setF(Failure f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been asigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((Failure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case F:
        return getF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case F:
        return isSetF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_result)
        return this.equals((dump_result)that);
      return false;
    }

    public boolean equals(dump_result that) {
      if (that == null)
        return false;

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dump_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dump_result typedOther = (dump_result)other;

      lastComparison = Boolean.valueOf(isSetF()).compareTo(typedOther.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = TBaseHelper.compareTo(this.f, typedOther.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // F
            if (field.type == TType.STRUCT) {
              this.f = new Failure();
              this.f.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetF()) {
        oprot.writeFieldBegin(F_FIELD_DESC);
        this.f.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_result(");
      boolean first = true;

      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class trim_args implements TBase<trim_args, trim_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("trim_args");

    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)1);
    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);

    public String category;
    public ByteBuffer token;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CATEGORY((short)1, "category"),
      TOKEN((short)2, "token"),
      SIZE((short)3, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 2: // TOKEN
            return TOKEN;
          case 3: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SIZE, new FieldMetaData("size", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(trim_args.class, metaDataMap);
    }

    public trim_args() {
    }

    public trim_args(
      String category,
      ByteBuffer token,
      int size)
    {
      this();
      this.category = category;
      this.token = token;
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trim_args(trim_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetToken()) {
        this.token = TBaseHelper.copyBinary(other.token);
;
      }
      this.size = other.size;
    }

    public trim_args deepCopy() {
      return new trim_args(this);
    }

    @Override
    public void clear() {
      this.category = null;
      this.token = null;
      setSizeIsSet(false);
      this.size = 0;
    }

    public String getCategory() {
      return this.category;
    }

    public trim_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been asigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public byte[] getToken() {
      setToken(TBaseHelper.rightSize(token));
      return token.array();
    }

    public ByteBuffer BufferForToken() {
      return token;
    }

    public trim_args setToken(byte[] token) {
      setToken(ByteBuffer.wrap(token));
      return this;
    }

    public trim_args setToken(ByteBuffer token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getSize() {
      return this.size;
    }

    public trim_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been asigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ByteBuffer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case TOKEN:
        return getToken();

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case TOKEN:
        return isSetToken();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trim_args)
        return this.equals((trim_args)that);
      return false;
    }

    public boolean equals(trim_args that) {
      if (that == null)
        return false;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(trim_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      trim_args typedOther = (trim_args)other;

      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CATEGORY
            if (field.type == TType.STRING) {
              this.category = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(this.category);
        oprot.writeFieldEnd();
      }
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeBinary(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trim_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.token, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class trim_result implements TBase<trim_result, trim_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("trim_result");

    private static final TField F_FIELD_DESC = new TField("f", TType.STRUCT, (short)1);

    public Failure f;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      F((short)1, "f");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // F
            return F;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.F, new FieldMetaData("f", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(trim_result.class, metaDataMap);
    }

    public trim_result() {
    }

    public trim_result(
      Failure f)
    {
      this();
      this.f = f;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trim_result(trim_result other) {
      if (other.isSetF()) {
        this.f = new Failure(other.f);
      }
    }

    public trim_result deepCopy() {
      return new trim_result(this);
    }

    @Override
    public void clear() {
      this.f = null;
    }

    public Failure getF() {
      return this.f;
    }

    public trim_result setF(Failure f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been asigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((Failure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case F:
        return getF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case F:
        return isSetF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trim_result)
        return this.equals((trim_result)that);
      return false;
    }

    public boolean equals(trim_result that) {
      if (that == null)
        return false;

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(trim_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      trim_result typedOther = (trim_result)other;

      lastComparison = Boolean.valueOf(isSetF()).compareTo(typedOther.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = TBaseHelper.compareTo(this.f, typedOther.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // F
            if (field.type == TType.STRUCT) {
              this.f = new Failure();
              this.f.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetF()) {
        oprot.writeFieldBegin(F_FIELD_DESC);
        this.f.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trim_result(");
      boolean first = true;

      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
