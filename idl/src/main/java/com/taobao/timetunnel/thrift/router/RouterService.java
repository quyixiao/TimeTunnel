/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.taobao.timetunnel.thrift.router;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TApplicationException;
import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.TProcessor;
import org.apache.thrift.TServiceClient;
import org.apache.thrift.TServiceClientFactory;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.async.TAsyncClient;
import org.apache.thrift.async.TAsyncClientFactory;
import org.apache.thrift.async.TAsyncClientManager;
import org.apache.thrift.async.TAsyncMethodCall;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.MapMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TMap;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@SuppressWarnings({"rawtypes","unchecked","serial"})
public class RouterService {

  public interface Iface {

    public String getBroker(String user, String pwd, String topic, String apply, Map<String,String> prop) throws RouterException, TException;

  }

  public interface AsyncIface {

    public void getBroker(String user, String pwd, String topic, String apply, Map<String,String> prop, AsyncMethodCallback<AsyncClient.getBroker_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String getBroker(String user, String pwd, String topic, String apply, Map<String,String> prop) throws RouterException, TException
    {
      send_getBroker(user, pwd, topic, apply, prop);
      return recv_getBroker();
    }

    public void send_getBroker(String user, String pwd, String topic, String apply, Map<String,String> prop) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBroker", TMessageType.CALL, ++seqid_));
      getBroker_args args = new getBroker_args();
      args.setUser(user);
      args.setPwd(pwd);
      args.setTopic(topic);
      args.setApply(apply);
      args.setProp(prop);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getBroker() throws RouterException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBroker failed: out of sequence response");
      }
      getBroker_result result = new getBroker_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.f != null) {
        throw result.f;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBroker failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBroker(String user, String pwd, String topic, String apply, Map<String,String> prop, AsyncMethodCallback<getBroker_call> resultHandler) throws TException {
      checkReady();
      getBroker_call method_call = new getBroker_call(user, pwd, topic, apply, prop, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getBroker_call extends TAsyncMethodCall {
      private String user;
      private String pwd;
      private String topic;
      private String apply;
      private Map<String,String> prop;
      public getBroker_call(String user, String pwd, String topic, String apply, Map<String,String> prop, AsyncMethodCallback<getBroker_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.pwd = pwd;
        this.topic = topic;
        this.apply = apply;
        this.prop = prop;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getBroker", TMessageType.CALL, 0));
        getBroker_args args = new getBroker_args();
        args.setUser(user);
        args.setPwd(pwd);
        args.setTopic(topic);
        args.setApply(apply);
        args.setProp(prop);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws RouterException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBroker();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getBroker", new getBroker());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getBroker implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBroker_args args = new getBroker_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBroker", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBroker_result result = new getBroker_result();
        try {
          result.success = iface_.getBroker(args.user, args.pwd, args.topic, args.apply, args.prop);
        } catch (RouterException f) {
          result.f = f;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getBroker", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBroker");
          oprot.writeMessageBegin(new TMessage("getBroker", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBroker", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getBroker_args implements TBase<getBroker_args, getBroker_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBroker_args");

    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short)1);
    private static final TField PWD_FIELD_DESC = new TField("pwd", TType.STRING, (short)2);
    private static final TField TOPIC_FIELD_DESC = new TField("topic", TType.STRING, (short)3);
    private static final TField APPLY_FIELD_DESC = new TField("apply", TType.STRING, (short)4);
    private static final TField PROP_FIELD_DESC = new TField("prop", TType.MAP, (short)5);

    public String user;
    public String pwd;
    public String topic;
    public String apply;
    public Map<String,String> prop;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER((short)1, "user"),
      PWD((short)2, "pwd"),
      TOPIC((short)3, "topic"),
      APPLY((short)4, "apply"),
      PROP((short)5, "prop");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // PWD
            return PWD;
          case 3: // TOPIC
            return TOPIC;
          case 4: // APPLY
            return APPLY;
          case 5: // PROP
            return PROP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PWD, new FieldMetaData("pwd", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new FieldMetaData("topic", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.APPLY, new FieldMetaData("apply", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PROP, new FieldMetaData("prop", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBroker_args.class, metaDataMap);
    }

    public getBroker_args() {
    }

    public getBroker_args(
      String user,
      String pwd,
      String topic,
      String apply,
      Map<String,String> prop)
    {
      this();
      this.user = user;
      this.pwd = pwd;
      this.topic = topic;
      this.apply = apply;
      this.prop = prop;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBroker_args(getBroker_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetApply()) {
        this.apply = other.apply;
      }
      if (other.isSetProp()) {
        Map<String,String> __this__prop = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.prop.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__prop_copy_key = other_element_key;

          String __this__prop_copy_value = other_element_value;

          __this__prop.put(__this__prop_copy_key, __this__prop_copy_value);
        }
        this.prop = __this__prop;
      }
    }

    public getBroker_args deepCopy() {
      return new getBroker_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.pwd = null;
      this.topic = null;
      this.apply = null;
      this.prop = null;
    }

    public String getUser() {
      return this.user;
    }

    public getBroker_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public getBroker_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been asigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public getBroker_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been asigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public String getApply() {
      return this.apply;
    }

    public getBroker_args setApply(String apply) {
      this.apply = apply;
      return this;
    }

    public void unsetApply() {
      this.apply = null;
    }

    /** Returns true if field apply is set (has been asigned a value) and false otherwise */
    public boolean isSetApply() {
      return this.apply != null;
    }

    public void setApplyIsSet(boolean value) {
      if (!value) {
        this.apply = null;
      }
    }

    public int getPropSize() {
      return (this.prop == null) ? 0 : this.prop.size();
    }

    public void putToProp(String key, String val) {
      if (this.prop == null) {
        this.prop = new HashMap<String,String>();
      }
      this.prop.put(key, val);
    }

    public Map<String,String> getProp() {
      return this.prop;
    }

    public getBroker_args setProp(Map<String,String> prop) {
      this.prop = prop;
      return this;
    }

    public void unsetProp() {
      this.prop = null;
    }

    /** Returns true if field prop is set (has been asigned a value) and false otherwise */
    public boolean isSetProp() {
      return this.prop != null;
    }

    public void setPropIsSet(boolean value) {
      if (!value) {
        this.prop = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case APPLY:
        if (value == null) {
          unsetApply();
        } else {
          setApply((String)value);
        }
        break;

      case PROP:
        if (value == null) {
          unsetProp();
        } else {
          setProp((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case PWD:
        return getPwd();

      case TOPIC:
        return getTopic();

      case APPLY:
        return getApply();

      case PROP:
        return getProp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case PWD:
        return isSetPwd();
      case TOPIC:
        return isSetTopic();
      case APPLY:
        return isSetApply();
      case PROP:
        return isSetProp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBroker_args)
        return this.equals((getBroker_args)that);
      return false;
    }

    public boolean equals(getBroker_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_apply = true && this.isSetApply();
      boolean that_present_apply = true && that.isSetApply();
      if (this_present_apply || that_present_apply) {
        if (!(this_present_apply && that_present_apply))
          return false;
        if (!this.apply.equals(that.apply))
          return false;
      }

      boolean this_present_prop = true && this.isSetProp();
      boolean that_present_prop = true && that.isSetProp();
      if (this_present_prop || that_present_prop) {
        if (!(this_present_prop && that_present_prop))
          return false;
        if (!this.prop.equals(that.prop))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBroker_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBroker_args typedOther = (getBroker_args)other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(typedOther.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = TBaseHelper.compareTo(this.pwd, typedOther.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(typedOther.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = TBaseHelper.compareTo(this.topic, typedOther.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApply()).compareTo(typedOther.isSetApply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApply()) {
        lastComparison = TBaseHelper.compareTo(this.apply, typedOther.apply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProp()).compareTo(typedOther.isSetProp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProp()) {
        lastComparison = TBaseHelper.compareTo(this.prop, typedOther.prop);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PWD
            if (field.type == TType.STRING) {
              this.pwd = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TOPIC
            if (field.type == TType.STRING) {
              this.topic = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // APPLY
            if (field.type == TType.STRING) {
              this.apply = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PROP
            if (field.type == TType.MAP) {
              {
                TMap _map0 = iprot.readMapBegin();
                this.prop = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  this.prop.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.pwd != null) {
        oprot.writeFieldBegin(PWD_FIELD_DESC);
        oprot.writeString(this.pwd);
        oprot.writeFieldEnd();
      }
      if (this.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(this.topic);
        oprot.writeFieldEnd();
      }
      if (this.apply != null) {
        oprot.writeFieldBegin(APPLY_FIELD_DESC);
        oprot.writeString(this.apply);
        oprot.writeFieldEnd();
      }
      if (this.prop != null) {
        oprot.writeFieldBegin(PROP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.prop.size()));
          for (Map.Entry<String, String> _iter4 : this.prop.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBroker_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apply:");
      if (this.apply == null) {
        sb.append("null");
      } else {
        sb.append(this.apply);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prop:");
      if (this.prop == null) {
        sb.append("null");
      } else {
        sb.append(this.prop);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBroker_result implements TBase<getBroker_result, getBroker_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBroker_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField F_FIELD_DESC = new TField("f", TType.STRUCT, (short)1);

    public String success;
    public RouterException f;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      F((short)1, "f");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // F
            return F;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.F, new FieldMetaData("f", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBroker_result.class, metaDataMap);
    }

    public getBroker_result() {
    }

    public getBroker_result(
      String success,
      RouterException f)
    {
      this();
      this.success = success;
      this.f = f;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBroker_result(getBroker_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetF()) {
        this.f = new RouterException(other.f);
      }
    }

    public getBroker_result deepCopy() {
      return new getBroker_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.f = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBroker_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RouterException getF() {
      return this.f;
    }

    public getBroker_result setF(RouterException f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been asigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((RouterException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case F:
        return getF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case F:
        return isSetF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBroker_result)
        return this.equals((getBroker_result)that);
      return false;
    }

    public boolean equals(getBroker_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBroker_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBroker_result typedOther = (getBroker_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF()).compareTo(typedOther.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = TBaseHelper.compareTo(this.f, typedOther.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // F
            if (field.type == TType.STRUCT) {
              this.f = new RouterException();
              this.f.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetF()) {
        oprot.writeFieldBegin(F_FIELD_DESC);
        this.f.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBroker_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
