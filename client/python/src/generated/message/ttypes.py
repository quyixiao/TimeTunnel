#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MessageStruct:
  """
  Attributes:
   - topic
   - content
   - createdTime
   - id
   - ipAddress
   - props
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'topic', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.I64, 'createdTime', None, None, ), # 3
    (4, TType.STRING, 'id', None, None, ), # 4
    (5, TType.STRING, 'ipAddress', None, None, ), # 5
    (6, TType.MAP, 'props', (TType.STRING,None,TType.STRING,None), None, ), # 6
  )

  def __init__(self, topic=None, content=None, createdTime=None, id=None, ipAddress=None, props=None,):
    self.topic = topic
    self.content = content
    self.createdTime = createdTime
    self.id = id
    self.ipAddress = ipAddress
    self.props = props

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.topic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.createdTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ipAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.props = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.props[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageStruct')
    if self.topic != None:
      oprot.writeFieldBegin('topic', TType.STRING, 1)
      oprot.writeString(self.topic)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.createdTime != None:
      oprot.writeFieldBegin('createdTime', TType.I64, 3)
      oprot.writeI64(self.createdTime)
      oprot.writeFieldEnd()
    if self.id != None:
      oprot.writeFieldBegin('id', TType.STRING, 4)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.ipAddress != None:
      oprot.writeFieldBegin('ipAddress', TType.STRING, 5)
      oprot.writeString(self.ipAddress)
      oprot.writeFieldEnd()
    if self.props != None:
      oprot.writeFieldBegin('props', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
      for kiter7,viter8 in self.props.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
